// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HermesUserService_CheckUsername_FullMethodName    = "/user.HermesUserService/CheckUsername"
	HermesUserService_GetUser_FullMethodName          = "/user.HermesUserService/GetUser"
	HermesUserService_CreateUser_FullMethodName       = "/user.HermesUserService/CreateUser"
	HermesUserService_PaginateUsers_FullMethodName    = "/user.HermesUserService/PaginateUsers"
	HermesUserService_ValidatePassword_FullMethodName = "/user.HermesUserService/ValidatePassword"
)

// HermesUserServiceClient is the client API for HermesUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User service definition
type HermesUserServiceClient interface {
	// Check if a username exists
	CheckUsername(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*CheckUsernameResponse, error)
	// Get user by username
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Create new user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Paginate users
	PaginateUsers(ctx context.Context, in *PaginateRequest, opts ...grpc.CallOption) (*PaginateUsersResponse, error)
	ValidatePassword(ctx context.Context, in *ValidatePasswordRequest, opts ...grpc.CallOption) (*ValidatePasswordResponse, error)
}

type hermesUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHermesUserServiceClient(cc grpc.ClientConnInterface) HermesUserServiceClient {
	return &hermesUserServiceClient{cc}
}

func (c *hermesUserServiceClient) CheckUsername(ctx context.Context, in *CheckUsernameRequest, opts ...grpc.CallOption) (*CheckUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUsernameResponse)
	err := c.cc.Invoke(ctx, HermesUserService_CheckUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesUserServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, HermesUserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesUserServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, HermesUserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesUserServiceClient) PaginateUsers(ctx context.Context, in *PaginateRequest, opts ...grpc.CallOption) (*PaginateUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginateUsersResponse)
	err := c.cc.Invoke(ctx, HermesUserService_PaginateUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesUserServiceClient) ValidatePassword(ctx context.Context, in *ValidatePasswordRequest, opts ...grpc.CallOption) (*ValidatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePasswordResponse)
	err := c.cc.Invoke(ctx, HermesUserService_ValidatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HermesUserServiceServer is the server API for HermesUserService service.
// All implementations must embed UnimplementedHermesUserServiceServer
// for forward compatibility.
//
// User service definition
type HermesUserServiceServer interface {
	// Check if a username exists
	CheckUsername(context.Context, *CheckUsernameRequest) (*CheckUsernameResponse, error)
	// Get user by username
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Create new user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Paginate users
	PaginateUsers(context.Context, *PaginateRequest) (*PaginateUsersResponse, error)
	ValidatePassword(context.Context, *ValidatePasswordRequest) (*ValidatePasswordResponse, error)
	mustEmbedUnimplementedHermesUserServiceServer()
}

// UnimplementedHermesUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHermesUserServiceServer struct{}

func (UnimplementedHermesUserServiceServer) CheckUsername(context.Context, *CheckUsernameRequest) (*CheckUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsername not implemented")
}
func (UnimplementedHermesUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedHermesUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedHermesUserServiceServer) PaginateUsers(context.Context, *PaginateRequest) (*PaginateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateUsers not implemented")
}
func (UnimplementedHermesUserServiceServer) ValidatePassword(context.Context, *ValidatePasswordRequest) (*ValidatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePassword not implemented")
}
func (UnimplementedHermesUserServiceServer) mustEmbedUnimplementedHermesUserServiceServer() {}
func (UnimplementedHermesUserServiceServer) testEmbeddedByValue()                           {}

// UnsafeHermesUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HermesUserServiceServer will
// result in compilation errors.
type UnsafeHermesUserServiceServer interface {
	mustEmbedUnimplementedHermesUserServiceServer()
}

func RegisterHermesUserServiceServer(s grpc.ServiceRegistrar, srv HermesUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedHermesUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HermesUserService_ServiceDesc, srv)
}

func _HermesUserService_CheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesUserServiceServer).CheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesUserService_CheckUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesUserServiceServer).CheckUsername(ctx, req.(*CheckUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermesUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesUserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesUserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermesUserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesUserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesUserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesUserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermesUserService_PaginateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesUserServiceServer).PaginateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesUserService_PaginateUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesUserServiceServer).PaginateUsers(ctx, req.(*PaginateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermesUserService_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesUserServiceServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesUserService_ValidatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesUserServiceServer).ValidatePassword(ctx, req.(*ValidatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HermesUserService_ServiceDesc is the grpc.ServiceDesc for HermesUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HermesUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.HermesUserService",
	HandlerType: (*HermesUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUsername",
			Handler:    _HermesUserService_CheckUsername_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _HermesUserService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _HermesUserService_CreateUser_Handler,
		},
		{
			MethodName: "PaginateUsers",
			Handler:    _HermesUserService_PaginateUsers_Handler,
		},
		{
			MethodName: "ValidatePassword",
			Handler:    _HermesUserService_ValidatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/user/user.proto",
}
